# TODO: should probably switch to generic
language: python

git:
  depth: 200

env:
  global:
    - DOIT=doit
    - TOX_ENV=py36

# TODO: add appropriate guards (e.g. only deploy on tag matching
# certain pattern) once auto packaging is figured out.

stages:
  - test
  - name: conda_package
#    if: (branch = master AND type != pull_request) OR (tag IS present)
  - name: pypi_package
    if: tag IS present

jobs:
  fast_finish: true
  include:
    - &tests
      stage: test
      python: 3.6
      env:
        - DESC="from current repo"
        - MODULE=autover
      before_install:
        - pip install pyct tox $DOIT
      install: true
      script:
        - doit original_script --example=$MODULE

    - <<: *tests
      python: 2.7
      env:
        - DESC="from current repo"
        - TOX_ENV=py27
        - MODULE=autover
        - DOIT="doit<0.30"
      script:
        - doit original_script --example=$MODULE --tox_python=$TOX_ENV

    - <<: *tests
      env:
        - DESC="from release tag"
        - MODULE=autover
      install:
        - doit release_tag

    - <<: *tests
      env:
        - DESC="from release tag plus commits"
        - MODULE=autover
      install:
        - doit release_tag
        - doit after_tag

    - <<: *tests
      env:
        - DESC="from prerelease tag"
        - MODULE=autover
      install:
        - doit prerelease_tag

    - <<: *tests
      env:
        - DESC="from prerelease tag plus commits"
        - MODULE=autover
      install:
        - doit prerelease_tag
        - doit after_tag


##############################

# test examples of using autover

    - &example_tests
      stage: test
      python: 3.6
      env:
        - DESC="example"
        - MODULE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      before_install:
        - mkdir /tmp/123
        - pip install pyct tox
        - doit $EXTRA copy_example_project --example=$MODULE
        - doit $EXTRA git_init
      install:
        - pip install -e .
        # build package so it's available for tox
        - python setup.py bdist_wheel
      script:
        - doit $EXTRA original_script --example=$MODULE

    - <<: *example_tests
      env:
        - DESC="example auto dl"
        - MODULE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      install:
        # build package so it's available for tox
        - python setup.py bdist_wheel

    - <<: *example_tests
      env:
        - DESC="example"
        - MODULE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install: true

    - <<: *example_tests
      env:
        - DESC="example pip+git"
        - MODULE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      install:
        - pip install git+file:///tmp/123
      script:
        - doit $EXTRA verify_installed_version --example=$MODULE

    - <<: *example_tests
      env:
        - DESC="example pip+git"
        - MODULE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install:
        - pip install git+file:///tmp/123
      script:
        - doit $EXTRA verify_installed_version --example=$MODULE


##############################

# auto packaging of autover

    - &conda_default
      stage: conda_package
      python: 3.6
      before_install:
        - pip install pyct && doit install_miniconda && rm -f .doit.db
        - export PATH="$HOME/miniconda/bin:$PATH"
        - conda install -y -c pyviz/label/dev -c conda-forge pyct
        - doit ci_configure_conda
      install:
        - doit build_conda_package
      script: true
#        - doit upload_conda_package --token=$CONDA_UPLOAD_TOKEN --label=dev

    - <<: *tests
      stage: pypi_package
      install: true
      script: true
      deploy:
        provider: pypi
        # could instead use real pypi when tag is release style
        server: https://test.pypi.org/legacy/
        distributions: "sdist bdist_wheel"
        user: ${PYPI_USERNAME}
        password: ${PYPI_PASSWORD}
        skip_cleanup: true


##############################

# test conda packaging of examples

    - <<: *conda_default
      stage: test
      env:
        - DESC="example conda"
        - MODULE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install:
        - mkdir /tmp/123
        - doit $EXTRA copy_example_project --example=$MODULE
        - doit $EXTRA git_init
      script:
        - doit $EXTRA build_conda_package

    - <<: *conda_default
      stage: test
      env:
        - DESC="example conda"
        - MODULE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      install:
        - mkdir /tmp/123
        - doit $EXTRA copy_example_project --example=$MODULE
        - doit $EXTRA git_init
      script:
        - doit build_conda_package
        - doit $EXTRA build_conda_package
