language: python

git:
  depth: 200

# TODO: add appropriate guards (e.g. only deploy on tag matching
# certain pattern) once auto packaging is figured out.

stages:
  - test
  - name: conda_package
#    if: (branch = master AND type != pull_request) OR (tag IS present)
  - name: pypi_package
    if: tag IS present

jobs:
  fast_finish: true
  include:
    - &tests
      stage: test
      python: 3.6
      env:
        - DESC="from current repo"
        - TOX_ENV=py36
        - MODULE=autover
      before_install:
        - pip install pyct tox
      install: true
      script:
        - doit original_script --example=$MODULE

    - <<: *tests
      env:
        - DESC="from release tag"
        - TOX_ENV=py36
        - MODULE=autover
      install:
        - doit git_init
        - doit release_tag

    - <<: *tests
      env:
        - DESC="from release tag plus commits"
        - TOX_ENV=py36
        - MODULE=autover
      install:
        - doit git_init
        - doit release_tag
        - doit after_tag

    - <<: *tests
      env:
        - DESC="from prerelease tag"
        - TOX_ENV=py36
        - MODULE=autover
      install:
        - doit git_init
        - doit prerelease_tag

    - <<: *tests
      env:
        - DESC="from prerelease tag plus commits"
        - TOX_ENV=py36
        - MODULE=autover
      install:
        - doit git_init
        - doit prerelease_tag
        - doit after_tag


##############################


    - &example_tests
      stage: test
      python: 3.6
      env:
        - DESC="example"
        - TOX_ENV=py36
        - MODULE=pkg_depend
        # TODO: what's right for travis?
        - EXTRA="--dir=/tmp/"
      before_install:
        - pip install pyct tox
        - doit $EXTRA copy_example_project --example=$MODULE
        - doit $EXTRA git_init  
      install:
        - pip install -e .
        # build package so it's available for tox
        - python setup.py bdist_wheel
      script:
        - doit $EXTRA original_script --example=$MODULE


    - <<: *example_tests
      env:
        - DESC="example auto dl"
        - TOX_ENV=py36
        - MODULE=pkg_depend
        # TODO: what's right for travis?
        - EXTRA="--dir=/tmp/"   
      install:
        # build package so it's available for tox
        - python setup.py bdist_wheel

    - <<: *example_tests
      env:
        - DESC="example"
        - TOX_ENV=py36
        - MODULE=pkg_bundle
        # TODO: what's right for travis?
        - EXTRA="--dir=/tmp/"   
      install: true     

# to be revisited; for testing dependency via param
#    - <<: *tests
#      env:
#        - DESC="example"
#        - TOX_ENV=py36
#        - MODULE=pkg_params
#      before_install:
#        - ./travis_test_pkg_setup.sh
#        - cd $HOME/$MODULE

    - <<: *example_tests
      env:
        - DESC="example pip+git"
        - TOX_ENV=py36
        - MODULE=pkg_depend
        # TODO: what's right for travis?
        - EXTRA="--dir=/tmp/"
      install:
        - pip install git+file://tmp
      script:
        - doit $EXTRA verify_installed_version --example=$MODULE

    - <<: *example_tests
      env:
        - DESC="example pip+git"
        - TOX_ENV=py36
        - MODULE=pkg_bundle
        # TODO: what's right for travis?
        - EXTRA="--dir=/tmp/"   
      install:
        - pip install git+file://$HOME/$MODULE
      script:
        - doit $EXTRA verify_installed_version --example=$MODULE

# to be revisited; for testing dependency via param
#    - <<: *tests
#      env:
#        - DESC="example pip+git"
#        - TOX_ENV=py36
#        - MODULE=pkg_params
#      before_install:
#        - ./travis_test_pkg_setup.sh
#        - pip install git+file://$HOME/$MODULE
#      install: true
#      script:
#        ### (1) verify installed python package
#        - GIT_VERSION=$(git describe --long) scripts/tmpverify $MODULE

    - stage: conda_package
      install:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH"
        - conda config --set always_yes yes --set changeps1 no
        - conda update conda
        - conda install conda-build anaconda-client
      script:
        - conda build conda.recipe
      after_success:
        - export LABEL="--label dev" && [[ ! -z "$TRAVIS_TAG" ]] && LABEL=""
#        - anaconda --token $CONDA_UPLOAD_TOKEN upload --user cball ${LABEL} $(conda build --output conda.recipe)

    - <<: *tests
      stage: pypi_package
      install: true
      script: true
      deploy:
        provider: pypi
        # could instead use real pypi when tag is release style
        server: https://test.pypi.org/legacy/
        distributions: "sdist bdist_wheel"
        user: ${PYPI_USERNAME}
        password: ${PYPI_PASSWORD}
        skip_cleanup: true
