# TODO: switch to pyctdev and clean up doit/pyct usage; more should
# move to doit so can run on win

language: python

env:
  global:
    # for package name != example (repo) name
    - EXAMPLE_PKGNAME=''

# TODO: add appropriate guards (e.g. only deploy on tag matching
# certain pattern) before merging back to master.

stages:
  - lint
  - test
  - name: conda_package
#    if: (branch = master AND type != pull_request) OR (tag IS present)
  - name: pypi_package
    if: tag IS present

jobs:
  fast_finish: true
  include:
    - stage: lint
      python: 3.6
      install: pip install tox
      script: tox -e lint_checks

    - stage: lint
      python: 3.6
      install: true
      # TODO: move into dodo.py
      script:
        # did you update bundled examples? (note: doesn't catch changes to setup.py)
        - diff autover/version.py examples/pkg_bundle/version.py
        - diff autover/version.py examples/PkgBundle/version.py

    - stage: test
      python: 3.6
      install: pip install tox
      script: tox -e py${TRAVIS_PYTHON_VERSION//./}

    - stage: test
      python: 2.7
      install: pip install tox
      script: tox -e py${TRAVIS_PYTHON_VERSION//./}


##############################

# test examples of using autover

    #### depend
    
    - &pkg_depend
      stage: test
      env:
        - DESC="example"
        - EXAMPLE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      python: 3.6
      before_install:
        - mkdir /tmp/123
        - if [ $TRAVIS_PYTHON_VERSION == "2.7" ]; then
            pip install "doit<0.30";
          fi
        - pip install "pyct <0.2.1" tox
        - doit $EXTRA copy_example_project --example=$EXAMPLE
        - doit $EXTRA git_init
      install:
        # install autover
        - pip install -e .
        # build autover package so it's available for pip
        - python setup.py bdist_wheel
      script:
        - doit $EXTRA original_script --example=$EXAMPLE --example-pkgname=$EXAMPLE_PKGNAME

    - &pkg_depend_autodl
      <<: *pkg_depend
      env:
        - DESC="example auto dl"
        - EXAMPLE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      # build package so it's available for pip
      install: python setup.py bdist_wheel

    - &pkg_depend_pipgit
      <<: *pkg_depend
      env:
        - DESC="example pip+git"
        - EXAMPLE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      install: pip install git+file:///tmp/123
      script: doit $EXTRA verify_installed_version --example=$EXAMPLE --example-pkgname=$EXAMPLE_PKGNAME


    #### bundle

    - &pkg_bundle
      <<: *pkg_depend
      stage: test
      env:
        - DESC="example"
        - EXAMPLE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install: true

    - &pkg_bundle_pipgit
      <<: *pkg_bundle
      env:
        - DESC="example pip+git"
        - EXAMPLE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install: pip install git+file:///tmp/123
      script: doit $EXTRA verify_installed_version --example=$EXAMPLE --example-pkgname=$EXAMPLE_PKGNAME


    #### params
    
    - &pkg_params
      <<: *pkg_depend
      stage: test
      env:
        - DESC="example"
        - EXAMPLE=pkg_params
        - EXTRA="--dir=/tmp/123"
      install: true

    - &pkg_params_pipgit
      <<: *pkg_params
      env:
        - DESC="example pip+git"
        - EXAMPLE=pkg_params
        - EXTRA="--dir=/tmp/123"
      # TODO: need prerelease param just now; update after param release        
      install: pip install --pre --index-url=https://test.pypi.org/simple/ --extra-index-url=https://pypi.org/simple git+file:///tmp/123     
      script: doit $EXTRA verify_installed_version --example=$EXAMPLE --example-pkgname=$EXAMPLE_PKGNAME


##############################

# repeat above but with py 2.7

    #### depends

    - <<: *pkg_depend
      python: 2.7

    - <<: *pkg_depend_autodl
      python: 2.7

    - <<: *pkg_depend_pipgit
      python: 2.7

    #### bundle

    - <<: *pkg_bundle
      python:2.7
      
    - <<: *pkg_bundle_pipgit
      python: 2.7

    #### params
    
    - <<: *pkg_params
      python: 2.7

    - <<: *pkg_params_pipgit
      python: 2.7

##############################

# test ok with repository name != package name

    - <<: *pkg_depend
      stage: test
      env:
        - DESC="example"
        - EXAMPLE=PkgBundle
        - EXAMPLE_PKGNAME="pkg_bundle"
        - EXTRA="--dir=/tmp/123"
      install: true

##############################

# auto packaging of autover

    - &conda_default
      stage: conda_package
      python: 3.6
      before_install:
        - pip install "pyct <0.2.1" && doit install_miniconda && rm -f .doit.db
        - export PATH="$HOME/miniconda/bin:$PATH"
        - conda install -y -c pyviz/label/dev -c conda-forge "pyct <0.2.1"
        - doit ci_configure_conda
      install: doit build_conda_package
      script: true
#        - doit upload_conda_package --token=$CONDA_UPLOAD_TOKEN --label=dev

    - stage: pypi_package
      install: true
      script: true
      deploy:
        provider: pypi
        # could instead use real pypi when tag is release style
        server: https://test.pypi.org/legacy/
        distributions: "sdist bdist_wheel"
        user: ${PYPI_USERNAME}
        password: ${PYPI_PASSWORD}
        skip_cleanup: true


##############################

# test conda packaging of examples

    - &conda_example_tests
      <<: *conda_default
      stage: test
      env:
        - DESC="example conda"
        - EXAMPLE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install:
        - mkdir /tmp/123
        - doit $EXTRA copy_example_project --example=$EXAMPLE
        - doit $EXTRA git_init
      script: doit $EXTRA build_conda_package

    - <<: *conda_example_tests
      env:
        - DESC="example conda"
        - EXAMPLE=pkg_depend
        - EXTRA="--dir=/tmp/123"
      script:
        - doit build_conda_package
        - doit $EXTRA build_conda_package

    - <<: *conda_example_tests
      env:
        - DESC="example conda"
        - EXAMPLE=pkg_json_fallback
        - EXTRA="--dir=/tmp/123"
      script:
        - doit build_conda_package
        - doit $EXTRA build_conda_package

    - <<: *conda_example_tests
      env:
        - DESC="example conda"
        - EXAMPLE=pkg_params
        - EXTRA="--dir=/tmp/123"
      script: doit $EXTRA build_conda_package -c pyviz/label/dev


##############################

# test that -dirty appears in package name for dirty repo

    - <<: *pkg_depend
      env:
        - DESC="check dirty pip"
        - EXAMPLE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install: true
      script: doit $EXTRA check_dirty_package_name

    - <<: *pkg_depend
      env:
        - DESC="check dirty 0 distance"
        - EXAMPLE=pkg_bundle
        - EXTRA="--dir=/tmp/123"
      install: pushd /tmp/123 && git tag -a v5000.0.0 -m "Final version" && popd
      script: doit $EXTRA check_dirty_package_name

    # test on autover itself
    - <<: *conda_default
      stage: test
      env: DESC="check dirty conda"
      install: true
      script: doit $EXTRA check_dirty_fails_conda_package
