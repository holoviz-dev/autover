#!/usr/bin/env python

import autover

###############
# (a) pep440 compliant?
import pkg_resources._vendor.packaging.version as packaging_version
packaging_version.Version(autover.__version__)

###############
# (b) following desired 'latest master' version scheme?
# v0.2.0-5-g85da374 --> 0.2.0.post5+g85da374
import subprocess
import sys
import os

GIT_VERSION = os.environ.get("GIT_VERSION")

if len(sys.argv)>1:
    v=sys.argv[1]
    commits=sys.argv[2]
    sha=sys.argv[3]
    print("Git info read from arguments: %s %s %s"%(v,commits,sha))
elif GIT_VERSION is not None:
    v,commits,sha=GIT_VERSION.split('-')
    print("Git info read from GIT_VERSION: %s %s %s"%(v,commits,sha))
else:
    desc=subprocess.check_output(['git','describe','--long']).decode('utf8').strip()
    v,commits,sha=desc.split('-')
    print("Git info collected from git: %s %s %s"%(v,commits,sha))

expected_version=v[1::]
if int(commits) > 0:
    expected_version += '.post'+commits+"+"+sha;

assert autover.__version__ == expected_version, 'autover.__version__ %r does not match %r' % (autover.__version__,expected_version)

###############
# (c) setup.py version matches __version__ (only relevant in a source dir)
try:
    import setup
    assert autover.__version__ == setup.setup_args['version'], 'autover.__version__ %r does not match setup version %r'%(autover.__version__, setup.setup_args['version'])
except ImportError:
    print("skipping setup.py check")
    import traceback
    traceback.print_exc()

###############
# (d) git tag alpha ... TODO
